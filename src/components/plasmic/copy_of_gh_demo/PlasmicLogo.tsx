// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gjjqSKbRqXuaUimkLf8eMG
// Component: 6xYe-Z6Fb3J3U

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_gh_demo.module.css"; // plasmic-import: gjjqSKbRqXuaUimkLf8eMG/projectcss
import sty from "./PlasmicLogo.module.css"; // plasmic-import: 6xYe-Z6Fb3J3U/css

import ezgif41Da2E638AfpngP6IlyZeM1I25YF from "./images/ezgif41Da2E638Afpng.png"; // plasmic-import: P6ilyZeM1i25yF/picture
import lineBranchpngUkcRlGcbIoWfSr from "./images/lineBranchpng.png"; // plasmic-import: UkcRLGcbIoWFSr/picture

export type PlasmicLogo__VariantMembers = {
  _50Opaque: "_50Opaque";
  smallLogo: "smallLogo";
};
export type PlasmicLogo__VariantsArgs = {
  _50Opaque?: SingleBooleanChoiceArg<"_50Opaque">;
  smallLogo?: SingleBooleanChoiceArg<"smallLogo">;
};
type VariantPropType = keyof PlasmicLogo__VariantsArgs;
export const PlasmicLogo__VariantProps = new Array<VariantPropType>(
  "_50Opaque",
  "smallLogo"
);

export type PlasmicLogo__ArgsType = {};
type ArgPropType = keyof PlasmicLogo__ArgsType;
export const PlasmicLogo__ArgProps = new Array<ArgPropType>();

export type PlasmicLogo__OverridesType = {
  root?: p.Flex<"a">;
};

export interface DefaultLogoProps {
  _50Opaque?: SingleBooleanChoiceArg<"_50Opaque">;
  smallLogo?: SingleBooleanChoiceArg<"smallLogo">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLogo__RenderFunc(props: {
  variants: PlasmicLogo__VariantsArgs;
  args: PlasmicLogo__ArgsType;
  overrides: PlasmicLogo__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "_50Opaque",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._50Opaque
      },
      {
        path: "smallLogo",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.smallLogo
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <a
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.root_50Opaque]: hasVariant($state, "_50Opaque", "_50Opaque"),
          [sty.rootsmallLogo]: hasVariant($state, "smallLogo", "smallLogo")
        }
      )}
      href={`/`}
    >
      {(hasVariant($state, "smallLogo", "smallLogo") ? true : true) ? (
        <p.PlasmicImg
          alt={"" as const}
          className={classNames(sty.img__ryLt2, {
            [sty.img_50Opaque__ryLt2SbPsi]: hasVariant(
              $state,
              "_50Opaque",
              "_50Opaque"
            ),
            [sty.imgsmallLogo__ryLt21Cu0F]: hasVariant(
              $state,
              "smallLogo",
              "smallLogo"
            )
          })}
          displayHeight={"59px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={
            hasVariant($state, "smallLogo", "smallLogo")
              ? ("50px" as const)
              : ("279px" as const)
          }
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"100%" as const}
          src={
            hasVariant($state, "smallLogo", "smallLogo")
              ? {
                  src: lineBranchpngUkcRlGcbIoWfSr,
                  fullWidth: 100,
                  fullHeight: 100,
                  aspectRatio: undefined
                }
              : {
                  src: ezgif41Da2E638AfpngP6IlyZeM1I25YF,
                  fullWidth: 392,
                  fullHeight: 115,
                  aspectRatio: undefined
                }
          }
        />
      ) : null}
      {(hasVariant($state, "smallLogo", "smallLogo") ? true : false) ? (
        <p.PlasmicImg
          alt={"" as const}
          className={classNames(sty.img__ynTcQ, {
            [sty.img_50Opaque__ynTcQsbPsi]: hasVariant(
              $state,
              "_50Opaque",
              "_50Opaque"
            ),
            [sty.imgsmallLogo__ynTcQ1Cu0F]: hasVariant(
              $state,
              "smallLogo",
              "smallLogo"
            )
          })}
          displayHeight={
            hasVariant($state, "smallLogo", "smallLogo")
              ? ("32px" as const)
              : ("100%" as const)
          }
          displayMaxHeight={"none" as const}
          displayMaxWidth={
            hasVariant($state, "smallLogo", "smallLogo")
              ? ("210px" as const)
              : ("none" as const)
          }
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant($state, "smallLogo", "smallLogo")
              ? ("100%" as const)
              : ("100%" as const)
          }
          src={
            hasVariant($state, "smallLogo", "smallLogo")
              ? {
                  src: ezgif41Da2E638AfpngP6IlyZeM1I25YF,
                  fullWidth: 392,
                  fullHeight: 115,
                  aspectRatio: undefined
                }
              : {
                  src: ezgif41Da2E638AfpngP6IlyZeM1I25YF,
                  fullWidth: 392,
                  fullHeight: 115,
                  aspectRatio: undefined
                }
          }
        />
      ) : null}
    </a>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogo__VariantsArgs;
    args?: PlasmicLogo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLogo__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLogo__ArgProps,
          internalVariantPropNames: PlasmicLogo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogo";
  } else {
    func.displayName = `PlasmicLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicLogo = Object.assign(
  // Top-level PlasmicLogo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicLogo
    internalVariantProps: PlasmicLogo__VariantProps,
    internalArgProps: PlasmicLogo__ArgProps
  }
);

export default PlasmicLogo;
/* prettier-ignore-end */
