// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gjjqSKbRqXuaUimkLf8eMG
// Component: fAZ8-8lINC-GVp

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { GHAccordion } from "../../../../components/Accordion/Accordion"; // plasmic-import: btoXQFfYkkASqh/codeComponent
import { GHAutocomplete } from "../../../../components/Autocomplete/Autocomplete"; // plasmic-import: FYxcmcPJ3n_0j1/codeComponent
import { GHBadge } from "../../../../components/Badge/Badge"; // plasmic-import: lANX1BkKUnGPA8/codeComponent
import { GHButton } from "../../../../components/Button/Button"; // plasmic-import: P54UprMnHkN0Wd/codeComponent
import { GHImage } from "../../../../components/Image/Image"; // plasmic-import: QSbPt8k9Nh7KxW/codeComponent
import { GHPopover } from "../../../../components/Popover/GH/Popover"; // plasmic-import: 34b1qUzp0twGIB/codeComponent
import { AntdPopover } from "../../../../components/Popover/Antd/Popover"; // plasmic-import: y_F7Hy83dhbOWl/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_gh_demo.module.css"; // plasmic-import: gjjqSKbRqXuaUimkLf8eMG/projectcss
import sty from "./PlasmicGhReactCookbookComponentsShowcase.module.css"; // plasmic-import: fAZ8-8lINC-GVp/css

export type PlasmicGhReactCookbookComponentsShowcase__VariantMembers = {};
export type PlasmicGhReactCookbookComponentsShowcase__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicGhReactCookbookComponentsShowcase__VariantsArgs;
export const PlasmicGhReactCookbookComponentsShowcase__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGhReactCookbookComponentsShowcase__ArgsType = {};
type ArgPropType = keyof PlasmicGhReactCookbookComponentsShowcase__ArgsType;
export const PlasmicGhReactCookbookComponentsShowcase__ArgProps =
  new Array<ArgPropType>();

export type PlasmicGhReactCookbookComponentsShowcase__OverridesType = {
  root?: p.Flex<"div">;
  ghAccordion?: p.Flex<typeof GHAccordion>;
  ghAutocomplete?: p.Flex<typeof GHAutocomplete>;
  ghBadge?: p.Flex<typeof GHBadge>;
  ghButton?: p.Flex<typeof GHButton>;
  ghImage?: p.Flex<typeof GHImage>;
  ghPopover?: p.Flex<typeof GHPopover>;
  antdPopover?: p.Flex<typeof AntdPopover>;
};

export interface DefaultGhReactCookbookComponentsShowcaseProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicGhReactCookbookComponentsShowcase__RenderFunc(props: {
  variants: PlasmicGhReactCookbookComponentsShowcase__VariantsArgs;
  args: PlasmicGhReactCookbookComponentsShowcase__ArgsType;
  overrides: PlasmicGhReactCookbookComponentsShowcase__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <GHAccordion
            data-plasmic-name={"ghAccordion"}
            data-plasmic-override={overrides.ghAccordion}
            bgColor={"#3232aa" as const}
            className={classNames("__wab_instance", sty.ghAccordion)}
            header={"Accordion" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uvmkm
              )}
            >
              {"GH Cookbook Accordion content"}
            </div>
          </GHAccordion>
          <GHAutocomplete
            data-plasmic-name={"ghAutocomplete"}
            data-plasmic-override={overrides.ghAutocomplete}
            className={classNames("__wab_instance", sty.ghAutocomplete)}
            label={"Autocomplete label" as const}
            value={"" as const}
          />

          <GHBadge
            data-plasmic-name={"ghBadge"}
            data-plasmic-override={overrides.ghBadge}
            backgroundColor={"#000000" as const}
            children={"Badge" as const}
            className={classNames("__wab_instance", sty.ghBadge)}
            textColor={"#ffffff" as const}
          />

          <GHButton
            data-plasmic-name={"ghButton"}
            data-plasmic-override={overrides.ghButton}
            className={classNames("__wab_instance", sty.ghButton)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bdL3Z
              )}
            >
              {"Button"}
            </div>
          </GHButton>
          <GHImage
            data-plasmic-name={"ghImage"}
            data-plasmic-override={overrides.ghImage}
            alt={"Image alt text" as const}
            backgroundColor={"transparent" as const}
            backgroundImage={"" as const}
            className={classNames("__wab_instance", sty.ghImage)}
            height={"100px" as const}
            src={"https://placehold.co/200x100" as const}
            width={"200px" as const}
          />

          <GHPopover
            data-plasmic-name={"ghPopover"}
            data-plasmic-override={overrides.ghPopover}
            className={classNames("__wab_instance", sty.ghPopover)}
            content={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zKl
                  )}
                >
                  {"Popover Item 1"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__waPhT
                  )}
                >
                  {"Popover Item 2"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ld7Uu
                  )}
                >
                  {"Popover Item 3"}
                </div>
              </React.Fragment>
            }
            disable={false}
            show={false}
            showOnHover={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2RCzM
              )}
            >
              {"GH Popover"}
            </div>
          </GHPopover>
          <AntdPopover
            data-plasmic-name={"antdPopover"}
            data-plasmic-override={overrides.antdPopover}
            arrow={false}
            className={classNames("__wab_instance", sty.antdPopover)}
            content={
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jmq
                  )}
                >
                  {"Popover Item 1"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__chmy7
                  )}
                >
                  {"Popover Item 2"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xHv3
                  )}
                >
                  {"Popover Item 3"}
                </div>
              </React.Fragment>
            }
            defaultOpen={false}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pd0Q2
              )}
            >
              {"Antd popover"}
            </div>
          </AntdPopover>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "ghAccordion",
    "ghAutocomplete",
    "ghBadge",
    "ghButton",
    "ghImage",
    "ghPopover",
    "antdPopover"
  ],
  ghAccordion: ["ghAccordion"],
  ghAutocomplete: ["ghAutocomplete"],
  ghBadge: ["ghBadge"],
  ghButton: ["ghButton"],
  ghImage: ["ghImage"],
  ghPopover: ["ghPopover"],
  antdPopover: ["antdPopover"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  ghAccordion: typeof GHAccordion;
  ghAutocomplete: typeof GHAutocomplete;
  ghBadge: typeof GHBadge;
  ghButton: typeof GHButton;
  ghImage: typeof GHImage;
  ghPopover: typeof GHPopover;
  antdPopover: typeof AntdPopover;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGhReactCookbookComponentsShowcase__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGhReactCookbookComponentsShowcase__VariantsArgs;
    args?: PlasmicGhReactCookbookComponentsShowcase__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicGhReactCookbookComponentsShowcase__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicGhReactCookbookComponentsShowcase__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames:
            PlasmicGhReactCookbookComponentsShowcase__ArgProps,
          internalVariantPropNames:
            PlasmicGhReactCookbookComponentsShowcase__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGhReactCookbookComponentsShowcase__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGhReactCookbookComponentsShowcase";
  } else {
    func.displayName = `PlasmicGhReactCookbookComponentsShowcase.${nodeName}`;
  }
  return func;
}

export const PlasmicGhReactCookbookComponentsShowcase = Object.assign(
  // Top-level PlasmicGhReactCookbookComponentsShowcase renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ghAccordion: makeNodeComponent("ghAccordion"),
    ghAutocomplete: makeNodeComponent("ghAutocomplete"),
    ghBadge: makeNodeComponent("ghBadge"),
    ghButton: makeNodeComponent("ghButton"),
    ghImage: makeNodeComponent("ghImage"),
    ghPopover: makeNodeComponent("ghPopover"),
    antdPopover: makeNodeComponent("antdPopover"),

    // Metadata about props expected for PlasmicGhReactCookbookComponentsShowcase
    internalVariantProps:
      PlasmicGhReactCookbookComponentsShowcase__VariantProps,
    internalArgProps: PlasmicGhReactCookbookComponentsShowcase__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Grubhub React components showcase",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicGhReactCookbookComponentsShowcase;
/* prettier-ignore-end */
