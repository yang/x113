// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gjjqSKbRqXuaUimkLf8eMG
// Component: L_PRfY6gJat57z

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_gh_demo.module.css"; // plasmic-import: gjjqSKbRqXuaUimkLf8eMG/projectcss
import sty from "./PlasmicValuePropCard.module.css"; // plasmic-import: L_PRfY6gJat57z/css

import exportHomepageValueProp2PngVjMh05PpF6RQzl from "./images/exportHomepageValueProp2Png.png"; // plasmic-import: VJMh05PpF6RQzl/picture

export type PlasmicValuePropCard__VariantMembers = {};
export type PlasmicValuePropCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicValuePropCard__VariantsArgs;
export const PlasmicValuePropCard__VariantProps = new Array<VariantPropType>();

export type PlasmicValuePropCard__ArgsType = {
  image?: React.ReactNode;
  heading?: React.ReactNode;
  content?: React.ReactNode;
};
type ArgPropType = keyof PlasmicValuePropCard__ArgsType;
export const PlasmicValuePropCard__ArgProps = new Array<ArgPropType>(
  "image",
  "heading",
  "content"
);

export type PlasmicValuePropCard__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
};

export interface DefaultValuePropCardProps {
  image?: React.ReactNode;
  heading?: React.ReactNode;
  content?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicValuePropCard__RenderFunc(props: {
  variants: PlasmicValuePropCard__VariantsArgs;
  args: PlasmicValuePropCard__ArgsType;
  overrides: PlasmicValuePropCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ktE80)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__yOjSx)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                fullWidth: 500,
                fullHeight: 300,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.image,
          className: classNames(sty.slotTargetImage)
        })}
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Cater to every taste with group ordering",
            value: args.heading,
            className: classNames(sty.slotTargetHeading)
          })}
        </h3>
        <div className={classNames(projectcss.all, sty.freeBox__eWotm)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyoneâ€™s meal shows up at the same time.",
            value: args.content,
            className: classNames(sty.slotTargetContent)
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValuePropCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValuePropCard__VariantsArgs;
    args?: PlasmicValuePropCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValuePropCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValuePropCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValuePropCard__ArgProps,
          internalVariantPropNames: PlasmicValuePropCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValuePropCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuePropCard";
  } else {
    func.displayName = `PlasmicValuePropCard.${nodeName}`;
  }
  return func;
}

export const PlasmicValuePropCard = Object.assign(
  // Top-level PlasmicValuePropCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicValuePropCard
    internalVariantProps: PlasmicValuePropCard__VariantProps,
    internalArgProps: PlasmicValuePropCard__ArgProps
  }
);

export default PlasmicValuePropCard;
/* prettier-ignore-end */
