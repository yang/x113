// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gjjqSKbRqXuaUimkLf8eMG
// Component: Cuj7Em-K07qsGe

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: lAIq-HXeA0fOM/component
import ValuePropCard from "../../ValuePropCard"; // plasmic-import: L_PRfY6gJat57z/component

import { useScreenVariants as useScreenVariantssE0Ngbim2HoNtM } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sE0Ngbim2HONtM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_gh_demo.module.css"; // plasmic-import: gjjqSKbRqXuaUimkLf8eMG/projectcss
import sty from "./PlasmicValueProps.module.css"; // plasmic-import: Cuj7Em-K07qsGe/css

import exportHomepageValueProp2PngVjMh05PpF6RQzl from "./images/exportHomepageValueProp2Png.png"; // plasmic-import: VJMh05PpF6RQzl/picture

export type PlasmicValueProps__VariantMembers = {};
export type PlasmicValueProps__VariantsArgs = {};
type VariantPropType = keyof PlasmicValueProps__VariantsArgs;
export const PlasmicValueProps__VariantProps = new Array<VariantPropType>();

export type PlasmicValueProps__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot15?: React.ReactNode;
  slot16?: React.ReactNode;
  slot17?: React.ReactNode;
  slot18?: React.ReactNode;
};
type ArgPropType = keyof PlasmicValueProps__ArgsType;
export const PlasmicValueProps__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "slot11",
  "slot12",
  "slot13",
  "slot14",
  "slot15",
  "slot16",
  "slot17",
  "slot18"
);

export type PlasmicValueProps__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultValuePropsProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot15?: React.ReactNode;
  slot16?: React.ReactNode;
  slot17?: React.ReactNode;
  slot18?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicValueProps__RenderFunc(props: {
  variants: PlasmicValueProps__VariantsArgs;
  args: PlasmicValueProps__ArgsType;
  overrides: PlasmicValueProps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssE0Ngbim2HoNtM()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xk6N7)}>
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Explore the industry's most flexible meal perks platform",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </h3>
        {true ? (
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            color={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("indigo" as const)
                : ("indigo" as const)
            }
            endIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__tZogT)}
                role={"img"}
              />
            }
            link={"#" as const}
            startIcon={
              <svg
                className={classNames(projectcss.all, sty.svg__s8No5)}
                role={"img"}
              />
            }
          />
        ) : null}
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jqLrn)}
        >
          <ValuePropCard
            className={classNames("__wab_instance", sty.valuePropCard__kUivC)}
            content={p.renderPlasmicSlot({
              defaultContents:
                "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyone’s meal shows up at the same time.",
              value: args.slot3
            })}
            heading={p.renderPlasmicSlot({
              defaultContents: "Cater to every taste with group ordering",
              value: args.slot2
            })}
            image={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zrYnd)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                    fullWidth: 500,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot
            })}
          />

          <ValuePropCard
            className={classNames("__wab_instance", sty.valuePropCard__vcGoz)}
            content={p.renderPlasmicSlot({
              defaultContents:
                "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyone’s meal shows up at the same time.",
              value: args.slot6
            })}
            heading={p.renderPlasmicSlot({
              defaultContents: "Cater to every taste with group ordering",
              value: args.slot5
            })}
            image={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qHyS)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                    fullWidth: 500,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot4
            })}
          />

          <ValuePropCard
            className={classNames("__wab_instance", sty.valuePropCard__dbT)}
            content={p.renderPlasmicSlot({
              defaultContents:
                "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyone’s meal shows up at the same time.",
              value: args.slot9
            })}
            heading={p.renderPlasmicSlot({
              defaultContents: "Cater to every taste with group ordering",
              value: args.slot8
            })}
            image={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__bxC0N)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                    fullWidth: 500,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot7
            })}
          />

          <ValuePropCard
            className={classNames("__wab_instance", sty.valuePropCard__hGzpG)}
            content={p.renderPlasmicSlot({
              defaultContents:
                "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyone’s meal shows up at the same time.",
              value: args.slot12
            })}
            heading={p.renderPlasmicSlot({
              defaultContents: "Cater to every taste with group ordering",
              value: args.slot11
            })}
            image={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__bjdwb)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                    fullWidth: 500,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot10
            })}
          />

          <ValuePropCard
            className={classNames("__wab_instance", sty.valuePropCard__loyk1)}
            content={p.renderPlasmicSlot({
              defaultContents:
                "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyone’s meal shows up at the same time.",
              value: args.slot15
            })}
            heading={p.renderPlasmicSlot({
              defaultContents: "Cater to every taste with group ordering",
              value: args.slot14
            })}
            image={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__r1Gm1)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                    fullWidth: 500,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot13
            })}
          />

          <ValuePropCard
            className={classNames("__wab_instance", sty.valuePropCard__zsJu)}
            content={p.renderPlasmicSlot({
              defaultContents:
                "Grubhub has the most group ordering options compared to any other platform, which means your employees can order the food they want and everyone’s meal shows up at the same time.",
              value: args.slot18
            })}
            heading={p.renderPlasmicSlot({
              defaultContents: "Cater to every taste with group ordering",
              value: args.slot17
            })}
            image={p.renderPlasmicSlot({
              defaultContents: (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__oNUi)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: exportHomepageValueProp2PngVjMh05PpF6RQzl,
                    fullWidth: 500,
                    fullHeight: 300,
                    aspectRatio: undefined
                  }}
                />
              ),

              value: args.slot16
            })}
          />
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "button"],
  h3: ["h3"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicValueProps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicValueProps__VariantsArgs;
    args?: PlasmicValueProps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicValueProps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicValueProps__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicValueProps__ArgProps,
          internalVariantPropNames: PlasmicValueProps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicValueProps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValueProps";
  } else {
    func.displayName = `PlasmicValueProps.${nodeName}`;
  }
  return func;
}

export const PlasmicValueProps = Object.assign(
  // Top-level PlasmicValueProps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicValueProps
    internalVariantProps: PlasmicValueProps__VariantProps,
    internalArgProps: PlasmicValueProps__ArgProps
  }
);

export default PlasmicValueProps;
/* prettier-ignore-end */
