// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gjjqSKbRqXuaUimkLf8eMG
// Component: GZ5tzhYSkuywVI

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_gh_demo.module.css"; // plasmic-import: gjjqSKbRqXuaUimkLf8eMG/projectcss
import sty from "./PlasmicWaysToOrderCard.module.css"; // plasmic-import: GZ5tzhYSkuywVI/css

import ezgif4D40088E46FjpgSI9B2P5Zhkir from "./images/ezgif4D40088E46Fjpg.jpg"; // plasmic-import: S__i9b2p5zhkir/picture

export type PlasmicWaysToOrderCard__VariantMembers = {};
export type PlasmicWaysToOrderCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicWaysToOrderCard__VariantsArgs;
export const PlasmicWaysToOrderCard__VariantProps =
  new Array<VariantPropType>();

export type PlasmicWaysToOrderCard__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWaysToOrderCard__ArgsType;
export const PlasmicWaysToOrderCard__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicWaysToOrderCard__OverridesType = {
  root?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
};

export interface DefaultWaysToOrderCardProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicWaysToOrderCard__RenderFunc(props: {
  variants: PlasmicWaysToOrderCard__VariantsArgs;
  args: PlasmicWaysToOrderCard__ArgsType;
  overrides: PlasmicWaysToOrderCard__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__kvcaZ)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zsIHi)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"200px" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
              src={{
                src: ezgif4D40088E46FjpgSI9B2P5Zhkir,
                fullWidth: 600,
                fullHeight: 400,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.children
        })}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__edzmq)}>
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(projectcss.all, projectcss.h3, sty.h3)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Feed any occasion",
                value: args.slot,
                className: classNames(sty.slotTargetSlot)
              })}
            </h3>
            <div className={classNames(projectcss.all, sty.freeBox___3FUzt)}>
              {p.renderPlasmicSlot({
                defaultContents:
                  "From virtual meetings to in-office events, boost employee engagement and delight clients with fast and reliable food delivery.",
                value: args.slot2,
                className: classNames(sty.slotTargetSlot2)
              })}
            </div>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWaysToOrderCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWaysToOrderCard__VariantsArgs;
    args?: PlasmicWaysToOrderCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWaysToOrderCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWaysToOrderCard__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWaysToOrderCard__ArgProps,
          internalVariantPropNames: PlasmicWaysToOrderCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicWaysToOrderCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWaysToOrderCard";
  } else {
    func.displayName = `PlasmicWaysToOrderCard.${nodeName}`;
  }
  return func;
}

export const PlasmicWaysToOrderCard = Object.assign(
  // Top-level PlasmicWaysToOrderCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicWaysToOrderCard
    internalVariantProps: PlasmicWaysToOrderCard__VariantProps,
    internalArgProps: PlasmicWaysToOrderCard__ArgProps
  }
);

export default PlasmicWaysToOrderCard;
/* prettier-ignore-end */
