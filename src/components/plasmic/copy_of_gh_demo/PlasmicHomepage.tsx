// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gjjqSKbRqXuaUimkLf8eMG
// Component: Qxl_nueKXSENw

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  useDependencyAwareQuery
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Disclaimer from "../../Disclaimer"; // plasmic-import: uVHMlhcU5QfESW/component
import Header from "../../Header"; // plasmic-import: p5dNySY11LZF8/component
import Logo from "../../Logo"; // plasmic-import: 6xYe-Z6Fb3J3U/component
import Button from "../../Button"; // plasmic-import: lAIq-HXeA0fOM/component
import Hero from "../../Hero"; // plasmic-import: 42jDWNQt6dfDf3/component
import WaysToOrder from "../../WaysToOrder"; // plasmic-import: 5mYxTbVRgYbrch/component
import Testimonial from "../../Testimonial"; // plasmic-import: nCaaekzfeqhOc2/component
import Footer from "../../Footer"; // plasmic-import: P0rkc9qKlFLeYl/component
import LogoFooter from "../../LogoFooter"; // plasmic-import: pZh-DpiaEeKpLU/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: lhOZW766xR2D7u/codeComponent

import { useScreenVariants as useScreenVariantssE0Ngbim2HoNtM } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sE0Ngbim2HONtM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_gh_demo.module.css"; // plasmic-import: gjjqSKbRqXuaUimkLf8eMG/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Qxl_nueKXSENw/css

import IconsvgIcon from "./icons/PlasmicIcon__Iconsvg"; // plasmic-import: PtEHwizV97vFhu/icon
import partnerlogosCompasspngUxhBj3T4HjSFl from "./images/partnerlogosCompasspng.png"; // plasmic-import: UxhBJ3T4Hj-SFl/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  disclaimer?: p.Flex<typeof Disclaimer>;
  header?: p.Flex<typeof Header>;
  hero?: p.Flex<typeof Hero>;
  button?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  waysToOrder?: p.Flex<typeof WaysToOrder>;
  testimonial?: p.Flex<typeof Testimonial>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssE0Ngbim2HoNtM()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            {true ? (
              <Disclaimer
                data-plasmic-name={"disclaimer"}
                data-plasmic-override={overrides.disclaimer}
                className={classNames("__wab_instance", sty.disclaimer)}
              />
            ) : null}
            {true ? (
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header)}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nO8QY
                    )}
                  >
                    {"Resources"}
                  </div>
                }
              />
            ) : null}
            {true ? (
              <Hero
                data-plasmic-name={"hero"}
                data-plasmic-override={overrides.hero}
                className={classNames("__wab_instance", sty.hero)}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hth8T
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#333333" }}
                      >
                        {
                          "Grubhub Corporate offers you the most ways to feed your employeesâ€”no matter where they're working."
                        }
                      </span>
                    </React.Fragment>
                  </div>
                }
                slot2={
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    color={"indigo" as const}
                    endIcon={null}
                    link={"#" as const}
                    startIcon={
                      <svg
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                  >
                    {"Get started"}
                  </Button>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wfNcu
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Keeps your team well-fed and happy."}
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#000000" }}
                      >
                        {"Keeps your team well-fed and happy."}
                      </span>
                    </React.Fragment>
                  )}
                </div>
              </Hero>
            ) : null}
            <WaysToOrder
              data-plasmic-name={"waysToOrder"}
              data-plasmic-override={overrides.waysToOrder}
              className={classNames("__wab_instance", sty.waysToOrder)}
            />

            <Testimonial
              data-plasmic-name={"testimonial"}
              data-plasmic-override={overrides.testimonial}
              className={classNames("__wab_instance", sty.testimonial)}
            />

            {true ? (
              <Footer
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                className={classNames("__wab_instance", sty.footer)}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "disclaimer",
    "header",
    "hero",
    "button",
    "svg",
    "waysToOrder",
    "testimonial",
    "footer"
  ],
  disclaimer: ["disclaimer"],
  header: ["header"],
  hero: ["hero", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"],
  waysToOrder: ["waysToOrder"],
  testimonial: ["testimonial"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  disclaimer: typeof Disclaimer;
  header: typeof Header;
  hero: typeof Hero;
  button: typeof Button;
  svg: "svg";
  waysToOrder: typeof WaysToOrder;
  testimonial: typeof Testimonial;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    disclaimer: makeNodeComponent("disclaimer"),
    header: makeNodeComponent("header"),
    hero: makeNodeComponent("hero"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    waysToOrder: makeNodeComponent("waysToOrder"),
    testimonial: makeNodeComponent("testimonial"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
